CCS PCM C Compiler, Version 5.008, 5967               19-Nov-22 23:20

               Filename:   C:\Users\jarvis\Desktop\hari\aaaaa\ex1\program\ex1.lst

               ROM used:   97 words (1%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           14 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   04A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... int h=0x01; 
.................... #use delay(crystal=4MHz) 
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... {  if (input(pin_a0) ==1){ 
0031:  BSF    03.5
0032:  BSF    05.0
0033:  BCF    03.5
0034:  BTFSS  05.0
0035:  GOTO   03E
....................    rotate_right( &h, 1); 
0036:  RRF    27,W
0037:  RRF    27,F
....................    output_b(h);} 
0038:  BSF    03.5
0039:  CLRF   06
003A:  BCF    03.5
003B:  MOVF   27,W
003C:  MOVWF  06
003D:  GOTO   045
....................    else{ 
....................    rotate_left( &h, 1); 
003E:  RLF    27,W
003F:  RLF    27,F
....................    output_b(h); } 
0040:  BSF    03.5
0041:  CLRF   06
0042:  BCF    03.5
0043:  MOVF   27,W
0044:  MOVWF  06
....................    clear_interrupt(INT_TIMER1); 
0045:  BCF    0C.0
0046:  BCF    0C.0
0047:  BCF    0A.3
0048:  BCF    0A.4
0049:  GOTO   01D
.................... } 
.................... void main() 
004A:  MOVF   03,W
004B:  ANDLW  1F
004C:  MOVWF  03
004D:  MOVLW  01
004E:  MOVWF  27
004F:  BSF    03.5
0050:  BSF    1F.0
0051:  BSF    1F.1
0052:  BSF    1F.2
0053:  BCF    1F.3
0054:  MOVLW  07
0055:  MOVWF  1C
0056:  BCF    03.7
.................... {  setup_timer_1(T1_INTERNAL|T1_DIV_BY_2);      //131 ms overflow 
0057:  MOVLW  95
0058:  BCF    03.5
0059:  MOVWF  10
....................    enable_interrupts(INT_TIMER1); 
005A:  BSF    03.5
005B:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
005C:  MOVLW  C0
005D:  BCF    03.5
005E:  IORWF  0B,F
....................    while(TRUE) 
....................    { 
005F:  GOTO   05F
....................       //TODO: User Code 
....................        
....................    } 
....................  
.................... } 
0060:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
