CCS PCM C Compiler, Version 5.008, 5967               13-Nov-22 17:29

               Filename:   C:\Users\jarvis\Documents\pic projects\automation\prj\program\4mhz.lst

               ROM used:   392 words (5%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           20 (5%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0A4
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
000C:  MOVLW  29
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0066:  MOVLW  0F
0067:  BSF    03.5
0068:  ANDWF  08,W
0069:  IORLW  F0
006A:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006B:  BCF    03.5
006C:  BSF    08.2
....................    delay_cycles(1); 
006D:  NOP
....................    lcd_output_enable(1); 
006E:  BSF    08.0
....................    delay_cycles(1); 
006F:  NOP
....................    high = lcd_read_nibble(); 
0070:  CALL   02D
0071:  MOVF   78,W
0072:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
0073:  BCF    08.0
....................    delay_cycles(1); 
0074:  NOP
....................    lcd_output_enable(1); 
0075:  BSF    08.0
....................    delay_us(1); 
0076:  NOP
....................    low = lcd_read_nibble(); 
0077:  CALL   02D
0078:  MOVF   78,W
0079:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
007A:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007B:  MOVLW  0F
007C:  BSF    03.5
007D:  ANDWF  08,W
007E:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
007F:  BCF    03.5
0080:  SWAPF  2D,W
0081:  MOVWF  77
0082:  MOVLW  F0
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORWF  2C,W
0086:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002D:  MOVF   08,W
002E:  MOVWF  77
002F:  SWAPF  08,W
0030:  ANDLW  0F
0031:  MOVWF  78
....................   #endif 
0032:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0021:  SWAPF  2D,W
0022:  ANDLW  F0
0023:  MOVWF  77
0024:  MOVLW  0F
0025:  ANDWF  08,W
0026:  IORWF  77,W
0027:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0028:  NOP
....................    lcd_output_enable(1); 
0029:  BSF    08.0
....................    delay_us(2); 
002A:  GOTO   02B
....................    lcd_output_enable(0); 
002B:  BCF    08.0
002C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0060:  BSF    03.5
0061:  BCF    08.0
....................    lcd_rs_tris(); 
0062:  BCF    08.1
....................    lcd_rw_tris(); 
0063:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0064:  BCF    03.5
0065:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0087:  MOVF   78,W
0088:  MOVWF  2C
0089:  BTFSC  2C.7
008A:  GOTO   066
....................    lcd_output_rs(address); 
008B:  BTFSS  2A.0
008C:  BCF    08.1
008D:  BTFSC  2A.0
008E:  BSF    08.1
....................    delay_cycles(1); 
008F:  NOP
....................    lcd_output_rw(0); 
0090:  BCF    08.2
....................    delay_cycles(1); 
0091:  NOP
....................    lcd_output_enable(0); 
0092:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0093:  SWAPF  2B,W
0094:  MOVWF  2C
0095:  MOVLW  0F
0096:  ANDWF  2C,F
0097:  MOVF   2C,W
0098:  MOVWF  2D
0099:  CALL   021
....................    lcd_send_nibble(n & 0xf); 
009A:  MOVF   2B,W
009B:  ANDLW  0F
009C:  MOVWF  2C
009D:  MOVWF  2D
009E:  CALL   021
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
0033:  MOVLW  0F
0034:  BSF    03.5
0035:  ANDWF  08,W
0036:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0037:  BCF    08.0
....................    lcd_rs_tris(); 
0038:  BCF    08.1
....................    lcd_rw_tris(); 
0039:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
003A:  BCF    03.5
003B:  BCF    08.1
....................    lcd_output_rw(0); 
003C:  BCF    08.2
....................    lcd_output_enable(0); 
003D:  BCF    08.0
....................      
....................    delay_ms(15); 
003E:  MOVLW  0F
003F:  MOVWF  29
0040:  CALL   00C
....................    for(i=1;i<=3;++i) 
0041:  MOVLW  01
0042:  MOVWF  28
0043:  MOVF   28,W
0044:  SUBLW  03
0045:  BTFSS  03.0
0046:  GOTO   04F
....................    { 
....................        lcd_send_nibble(3); 
0047:  MOVLW  03
0048:  MOVWF  2D
0049:  CALL   021
....................        delay_ms(5); 
004A:  MOVLW  05
004B:  MOVWF  29
004C:  CALL   00C
004D:  INCF   28,F
004E:  GOTO   043
....................    } 
....................     
....................    lcd_send_nibble(2); 
004F:  MOVLW  02
0050:  MOVWF  2D
0051:  CALL   021
....................    delay_ms(5); 
0052:  MOVLW  05
0053:  MOVWF  29
0054:  CALL   00C
....................    for(i=0;i<=3;++i) 
0055:  CLRF   28
0056:  MOVF   28,W
0057:  SUBLW  03
0058:  BTFSS  03.0
0059:  GOTO   0A1
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
005A:  MOVF   28,W
005B:  CALL   004
005C:  MOVWF  29
005D:  CLRF   2A
005E:  MOVF   29,W
005F:  MOVWF  2B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
*
009F:  INCF   28,F
00A0:  GOTO   056
00A1:  BCF    0A.3
00A2:  BCF    0A.4
00A3:  GOTO   0B3 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... ///////////////////////////////////// 
.................... void main(){ 
00A4:  MOVF   03,W
00A5:  ANDLW  1F
00A6:  MOVWF  03
00A7:  MOVLW  FF
00A8:  MOVWF  20
00A9:  BSF    03.5
00AA:  BSF    1F.0
00AB:  BSF    1F.1
00AC:  BSF    1F.2
00AD:  BCF    1F.3
00AE:  MOVLW  07
00AF:  MOVWF  1C
00B0:  BCF    03.7
....................    lcd_init(); 
00B1:  BCF    03.5
00B2:  GOTO   033
....................    long int  ldr1,ldr2=0 ; 
....................    int EC=0;int16 i=270; 
00B3:  CLRF   24
00B4:  CLRF   23
00B5:  CLRF   25
00B6:  MOVLW  01
00B7:  MOVWF  27
00B8:  MOVLW  0E
00B9:  MOVWF  26
....................    setup_adc_ports(AN0_AN1_AN3); 
00BA:  BSF    03.5
00BB:  BCF    1F.0
00BC:  BCF    1F.1
00BD:  BSF    1F.2
00BE:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
00BF:  BCF    1F.6
00C0:  BCF    03.5
00C1:  BSF    1F.6
00C2:  BSF    1F.7
00C3:  BSF    03.5
00C4:  BSF    1F.7
00C5:  BCF    03.5
00C6:  BSF    1F.0
....................    output_b(0X00); 
00C7:  BSF    03.5
00C8:  CLRF   06
00C9:  BCF    03.5
00CA:  CLRF   06
....................    output_high(pin_b0); 
00CB:  BSF    03.5
00CC:  BCF    06.0
00CD:  BCF    03.5
00CE:  BSF    06.0
....................    setup_ccp1(CCP_PWM); 
00CF:  BCF    20.2
00D0:  MOVF   20,W
00D1:  BSF    03.5
00D2:  MOVWF  07
00D3:  BCF    03.5
00D4:  BCF    07.2
00D5:  MOVLW  0C
00D6:  MOVWF  17
....................    set_pwm1_duty((int16)290); 
00D7:  MOVLW  48
00D8:  MOVWF  15
00D9:  MOVF   17,W
00DA:  ANDLW  CF
00DB:  IORLW  20
00DC:  MOVWF  17
....................    setup_timer_2(T2_DIV_BY_16,255,1); 
00DD:  MOVLW  00
00DE:  MOVWF  78
00DF:  IORLW  06
00E0:  MOVWF  12
00E1:  MOVLW  FF
00E2:  BSF    03.5
00E3:  MOVWF  12
....................   while(TRUE) 
....................    {  output_high(pin_b2); 
00E4:  BCF    06.2
00E5:  BCF    03.5
00E6:  BSF    06.2
....................       delay_ms(2000); 
00E7:  MOVLW  08
00E8:  MOVWF  28
00E9:  MOVLW  FA
00EA:  MOVWF  29
00EB:  CALL   00C
00EC:  DECFSZ 28,F
00ED:  GOTO   0E9
....................       SET_ADC_CHANNEL(0); 
00EE:  MOVLW  00
00EF:  MOVWF  78
00F0:  MOVF   1F,W
00F1:  ANDLW  C7
00F2:  IORWF  78,W
00F3:  MOVWF  1F
....................       WHILE(!EC) 
00F4:  MOVF   25,F
00F5:  BTFSS  03.2
00F6:  GOTO   0FB
....................       { EC =adc_done(); } ldr1 = read_adc(); 
00F7:  CLRF   25
00F8:  BTFSS  1F.2
00F9:  INCF   25,F
00FA:  GOTO   0F4
00FB:  BSF    1F.2
00FC:  BTFSC  1F.2
00FD:  GOTO   0FC
00FE:  BSF    03.5
00FF:  MOVF   1E,W
0100:  BCF    03.5
0101:  MOVWF  21
0102:  MOVF   1E,W
0103:  MOVWF  22
....................       SET_ADC_CHANNEL(1); 
0104:  MOVLW  08
0105:  MOVWF  78
0106:  MOVF   1F,W
0107:  ANDLW  C7
0108:  IORWF  78,W
0109:  MOVWF  1F
....................       WHILE(!EC) 
010A:  MOVF   25,F
010B:  BTFSS  03.2
010C:  GOTO   111
....................       { EC =adc_done(); } 
010D:  CLRF   25
010E:  BTFSS  1F.2
010F:  INCF   25,F
0110:  GOTO   10A
....................       ldr2 = read_adc(); //ldr2 
0111:  BSF    1F.2
0112:  BTFSC  1F.2
0113:  GOTO   112
0114:  BSF    03.5
0115:  MOVF   1E,W
0116:  BCF    03.5
0117:  MOVWF  23
0118:  MOVF   1E,W
0119:  MOVWF  24
....................       if (ldr1==0 || ldr2==0) {break;} 
011A:  MOVF   21,F
011B:  BTFSS  03.2
011C:  GOTO   120
011D:  MOVF   22,F
011E:  BTFSC  03.2
011F:  GOTO   125
0120:  MOVF   23,F
0121:  BTFSS  03.2
0122:  GOTO   126
0123:  MOVF   24,F
0124:  BTFSC  03.2
0125:  GOTO   182
....................       output_low(pin_b2); 
0126:  BSF    03.5
0127:  BCF    06.2
0128:  BCF    03.5
0129:  BCF    06.2
....................       delay_ms(2000); 
012A:  MOVLW  08
012B:  MOVWF  28
012C:  MOVLW  FA
012D:  MOVWF  29
012E:  CALL   00C
012F:  DECFSZ 28,F
0130:  GOTO   12C
....................       if (i> 470) {i=290;} 
0131:  MOVF   27,W
0132:  SUBLW  00
0133:  BTFSC  03.0
0134:  GOTO   140
0135:  XORLW  FF
0136:  BTFSS  03.2
0137:  GOTO   13C
0138:  MOVF   26,W
0139:  SUBLW  D6
013A:  BTFSC  03.0
013B:  GOTO   140
013C:  MOVLW  01
013D:  MOVWF  27
013E:  MOVLW  22
013F:  MOVWF  26
....................       if (ldr2 > ldr1) 
0140:  MOVF   22,W
0141:  SUBWF  24,W
0142:  BTFSS  03.0
0143:  GOTO   166
0144:  BTFSS  03.2
0145:  GOTO   14A
0146:  MOVF   23,W
0147:  SUBWF  21,W
0148:  BTFSC  03.0
0149:  GOTO   166
....................       {  output_high(pin_b3); 
014A:  BSF    03.5
014B:  BCF    06.3
014C:  BCF    03.5
014D:  BSF    06.3
....................          set_pwm1_duty((int16)i); 
014E:  MOVF   27,W
014F:  MOVWF  79
0150:  MOVF   26,W
0151:  MOVWF  78
0152:  RRF    79,F
0153:  RRF    78,F
0154:  RRF    79,F
0155:  RRF    78,F
0156:  RRF    79,F
0157:  MOVF   78,W
0158:  MOVWF  15
0159:  RRF    79,F
015A:  RRF    79,W
015B:  ANDLW  30
015C:  MOVWF  77
015D:  MOVF   17,W
015E:  ANDLW  CF
015F:  IORWF  77,W
0160:  MOVWF  17
....................          i=i+10;  } 
0161:  MOVLW  0A
0162:  ADDWF  26,F
0163:  BTFSC  03.0
0164:  INCF   27,F
0165:  GOTO   17F
....................       else if(ldr1==ldr2 || ldr1>ldr2)    
0166:  MOVF   23,W
0167:  SUBWF  21,W
0168:  BTFSS  03.2
0169:  GOTO   16E
016A:  MOVF   24,W
016B:  SUBWF  22,W
016C:  BTFSC  03.2
016D:  GOTO   178
016E:  MOVF   24,W
016F:  SUBWF  22,W
0170:  BTFSS  03.0
0171:  GOTO   17F
0172:  BTFSS  03.2
0173:  GOTO   178
0174:  MOVF   21,W
0175:  SUBWF  23,W
0176:  BTFSC  03.0
0177:  GOTO   17F
....................       {  output_low(pin_b3); 
0178:  BSF    03.5
0179:  BCF    06.3
017A:  BCF    03.5
017B:  BCF    06.3
....................          continue;   } 
017C:  BSF    03.5
017D:  GOTO   0E4
017E:  BCF    03.5
017F:  BSF    03.5
0180:  GOTO   0E4
0181:  BCF    03.5
.................... } 
....................    while(1){ 
....................    output_high(pin_b1);} 
0182:  BSF    03.5
0183:  BCF    06.1
0184:  BCF    03.5
0185:  BSF    06.1
0186:  GOTO   182
....................     
.................... } 
0187:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
