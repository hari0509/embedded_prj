CCS PCM C Compiler, Version 5.008, 5967               17-Jan-23 11:30

               Filename:   C:\Users\jarvis\Desktop\mpmc\github\Robotic hand automation using pic16f877a\program\robotic arm.lst

               ROM used:   169 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           8 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   083
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
*
0031:  MOVLW  12
0032:  SUBWF  23,F
0033:  BTFSS  03.0
0034:  GOTO   044
0035:  MOVLW  23
0036:  MOVWF  04
0037:  BCF    03.7
0038:  MOVLW  FC
0039:  ANDWF  00,F
003A:  BCF    03.0
003B:  RRF    00,F
003C:  RRF    00,F
003D:  MOVF   00,W
003E:  BTFSC  03.2
003F:  GOTO   044
0040:  GOTO   042
0041:  NOP
0042:  DECFSZ 00,F
0043:  GOTO   041
0044:  RETURN
.................... void down(){ 
.................... for(int i=0;i<5;i++){ 
*
0019:  CLRF   21
001A:  MOVF   21,W
001B:  SUBLW  04
001C:  BTFSS  03.0
001D:  GOTO   02E
.................... output_high(pin_b0); 
001E:  BSF    03.5
001F:  BCF    06.0
0020:  BCF    03.5
0021:  BSF    06.0
.................... delay_us(1000); 
0022:  MOVLW  01
0023:  MOVWF  22
0024:  CALL   004
.................... output_low(pin_b0); 
0025:  BSF    03.5
0026:  BCF    06.0
0027:  BCF    03.5
0028:  BCF    06.0
.................... delay_us(19000); } 
0029:  MOVLW  13
002A:  MOVWF  22
002B:  CALL   004
002C:  INCF   21,F
002D:  GOTO   01A
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   090 (RETURN)
.................... } 
.................... void mid(){ 
.................... for(int i=0;i<5;i++){ 
*
0045:  CLRF   21
0046:  MOVF   21,W
0047:  SUBLW  04
0048:  BTFSS  03.0
0049:  GOTO   068
.................... output_high(pin_b0); 
004A:  BSF    03.5
004B:  BCF    06.0
004C:  BCF    03.5
004D:  BSF    06.0
.................... delay_us(1500); 
004E:  MOVLW  01
004F:  MOVWF  22
0050:  CALL   004
0051:  MOVLW  02
0052:  MOVWF  22
0053:  MOVLW  F7
0054:  MOVWF  23
0055:  CALL   031
0056:  DECFSZ 22,F
0057:  GOTO   053
.................... output_low(pin_b0); 
0058:  BSF    03.5
0059:  BCF    06.0
005A:  BCF    03.5
005B:  BCF    06.0
.................... delay_us(18500);  } 
005C:  MOVLW  12
005D:  MOVWF  22
005E:  CALL   004
005F:  MOVLW  02
0060:  MOVWF  22
0061:  MOVLW  F7
0062:  MOVWF  23
0063:  CALL   031
0064:  DECFSZ 22,F
0065:  GOTO   061
0066:  INCF   21,F
0067:  GOTO   046
0068:  BCF    0A.3
0069:  BCF    0A.4
006A:  GOTO   098 (RETURN)
.................... } 
.................... void up(){ 
.................... for(int i=0;i<5;i++){ 
006B:  CLRF   21
006C:  MOVF   21,W
006D:  SUBLW  04
006E:  BTFSS  03.0
006F:  GOTO   080
.................... output_high(pin_b0); 
0070:  BSF    03.5
0071:  BCF    06.0
0072:  BCF    03.5
0073:  BSF    06.0
.................... delay_us(2000); 
0074:  MOVLW  02
0075:  MOVWF  22
0076:  CALL   004
.................... output_low(pin_b0); 
0077:  BSF    03.5
0078:  BCF    06.0
0079:  BCF    03.5
007A:  BCF    06.0
.................... delay_us(18000);} 
007B:  MOVLW  12
007C:  MOVWF  22
007D:  CALL   004
007E:  INCF   21,F
007F:  GOTO   06C
0080:  BCF    0A.3
0081:  BCF    0A.4
0082:  GOTO   0A0 (RETURN)
.................... } 
.................... void main() 
0083:  MOVF   03,W
0084:  ANDLW  1F
0085:  MOVWF  03
0086:  BSF    03.5
0087:  BSF    1F.0
0088:  BSF    1F.1
0089:  BSF    1F.2
008A:  BCF    1F.3
008B:  MOVLW  07
008C:  MOVWF  1C
008D:  BCF    03.7
.................... { 
....................    while(1) 
....................    { 
....................       //TODO: User Code 
....................       down(); //-90 degree 
008E:  BCF    03.5
008F:  GOTO   019
....................       delay_ms(1000); 
0090:  MOVLW  04
0091:  MOVWF  21
0092:  MOVLW  FA
0093:  MOVWF  22
0094:  CALL   004
0095:  DECFSZ 21,F
0096:  GOTO   092
....................       mid();   // +0 degree 
0097:  GOTO   045
....................       delay_ms(1000); 
0098:  MOVLW  04
0099:  MOVWF  21
009A:  MOVLW  FA
009B:  MOVWF  22
009C:  CALL   004
009D:  DECFSZ 21,F
009E:  GOTO   09A
....................       up(); //+90 degree 
009F:  GOTO   06B
....................       delay_ms(1000); 
00A0:  MOVLW  04
00A1:  MOVWF  21
00A2:  MOVLW  FA
00A3:  MOVWF  22
00A4:  CALL   004
00A5:  DECFSZ 21,F
00A6:  GOTO   0A2
00A7:  GOTO   08F
....................    } 
....................  
.................... } 
....................  
00A8:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
