CCS PCM C Compiler, Version 5.008, 5967               16-Jan-23 21:15

               Filename:   C:\Users\jarvis\Desktop\mpmc\github\Smart Home using pic16f877a\program\smart home.lst

               ROM used:   957 words (12%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           30 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2EF
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 09,2A
000D:  DATA E5,36
000E:  DATA F0,32
000F:  DATA F2,30
0010:  DATA F4,3A
0011:  DATA F2,32
0012:  DATA 8A,04
0013:  DATA 25,36
0014:  DATA 64,10
0015:  DATA 2D,10
0016:  DATA C3,32
0017:  DATA EC,39
0018:  DATA E9,3A
0019:  DATA 73,00
*
0124:  MOVLW  8E
0125:  MOVWF  77
0126:  MOVF   27,W
0127:  MOVWF  78
0128:  MOVF   26,W
0129:  MOVWF  79
012A:  CLRF   7A
012B:  MOVF   78,F
012C:  BTFSS  03.2
012D:  GOTO   138
012E:  MOVF   79,W
012F:  MOVWF  78
0130:  CLRF   79
0131:  MOVLW  08
0132:  SUBWF  77,F
0133:  MOVF   78,F
0134:  BTFSS  03.2
0135:  GOTO   138
0136:  CLRF   77
0137:  GOTO   140
0138:  BCF    03.0
0139:  BTFSC  78.7
013A:  GOTO   13F
013B:  RLF    79,F
013C:  RLF    78,F
013D:  DECF   77,F
013E:  GOTO   138
013F:  BCF    78.7
0140:  BCF    0A.3
0141:  BCF    0A.4
0142:  GOTO   340 (RETURN)
0143:  MOVF   26,W
0144:  BTFSC  03.2
0145:  GOTO   1B3
0146:  MOVWF  2E
0147:  MOVF   2A,W
0148:  BTFSC  03.2
0149:  GOTO   1B3
014A:  ADDWF  2E,F
014B:  BTFSC  03.0
014C:  GOTO   154
014D:  MOVLW  7F
014E:  SUBWF  2E,F
014F:  BTFSS  03.0
0150:  GOTO   1B3
0151:  BTFSC  03.2
0152:  GOTO   1B3
0153:  GOTO   158
0154:  MOVLW  81
0155:  ADDWF  2E,F
0156:  BTFSC  03.0
0157:  GOTO   1B3
0158:  MOVF   2E,W
0159:  MOVWF  77
015A:  CLRF   78
015B:  CLRF   79
015C:  CLRF   7A
015D:  MOVF   27,W
015E:  MOVWF  32
015F:  BSF    32.7
0160:  MOVF   28,W
0161:  MOVWF  31
0162:  MOVF   29,W
0163:  MOVWF  30
0164:  MOVLW  18
0165:  MOVWF  2E
0166:  CLRF   2F
0167:  BTFSS  30.0
0168:  GOTO   181
0169:  MOVF   2D,W
016A:  ADDWF  7A,F
016B:  BTFSS  03.0
016C:  GOTO   173
016D:  INCF   79,F
016E:  BTFSS  03.2
016F:  GOTO   173
0170:  INCF   78,F
0171:  BTFSC  03.2
0172:  BSF    2F.7
0173:  MOVF   2C,W
0174:  ADDWF  79,F
0175:  BTFSS  03.0
0176:  GOTO   17A
0177:  INCF   78,F
0178:  BTFSC  03.2
0179:  BSF    2F.7
017A:  MOVF   2B,W
017B:  MOVWF  28
017C:  BSF    28.7
017D:  MOVF   28,W
017E:  ADDWF  78,F
017F:  BTFSC  03.0
0180:  BSF    2F.7
0181:  RLF    2F,F
0182:  RRF    78,F
0183:  RRF    79,F
0184:  RRF    7A,F
0185:  RRF    32,F
0186:  RRF    31,F
0187:  RRF    30,F
0188:  BCF    03.0
0189:  DECFSZ 2E,F
018A:  GOTO   166
018B:  MOVLW  01
018C:  ADDWF  77,F
018D:  BTFSC  03.0
018E:  GOTO   1B3
018F:  BTFSC  78.7
0190:  GOTO   198
0191:  RLF    32,F
0192:  RLF    7A,F
0193:  RLF    79,F
0194:  RLF    78,F
0195:  DECF   77,F
0196:  BTFSC  03.2
0197:  GOTO   1B3
0198:  BTFSS  32.7
0199:  GOTO   1A9
019A:  INCF   7A,F
019B:  BTFSS  03.2
019C:  GOTO   1A9
019D:  INCF   79,F
019E:  BTFSS  03.2
019F:  GOTO   1A9
01A0:  INCF   78,F
01A1:  BTFSS  03.2
01A2:  GOTO   1A9
01A3:  RRF    78,F
01A4:  RRF    79,F
01A5:  RRF    7A,F
01A6:  INCF   77,F
01A7:  BTFSC  03.2
01A8:  GOTO   1B3
01A9:  MOVF   27,W
01AA:  MOVWF  2F
01AB:  MOVF   2B,W
01AC:  XORWF  2F,F
01AD:  BTFSS  2F.7
01AE:  GOTO   1B1
01AF:  BSF    78.7
01B0:  GOTO   1B7
01B1:  BCF    78.7
01B2:  GOTO   1B7
01B3:  CLRF   77
01B4:  CLRF   78
01B5:  CLRF   79
01B6:  CLRF   7A
01B7:  BCF    0A.3
01B8:  BCF    0A.4
01B9:  GOTO   351 (RETURN)
01BA:  MOVLW  8E
01BB:  MOVWF  77
01BC:  MOVF   26,W
01BD:  SUBWF  77,F
01BE:  MOVF   27,W
01BF:  MOVWF  79
01C0:  MOVF   28,W
01C1:  MOVWF  78
01C2:  BSF    79.7
01C3:  MOVF   77,F
01C4:  BTFSC  03.2
01C5:  GOTO   1D1
01C6:  BCF    03.0
01C7:  MOVF   79,F
01C8:  BTFSS  03.2
01C9:  GOTO   1CD
01CA:  MOVF   78,F
01CB:  BTFSC  03.2
01CC:  GOTO   1D1
01CD:  RRF    79,F
01CE:  RRF    78,F
01CF:  DECFSZ 77,F
01D0:  GOTO   1C6
01D1:  BTFSS  27.7
01D2:  GOTO   1D8
01D3:  COMF   78,F
01D4:  COMF   79,F
01D5:  INCF   78,F
01D6:  BTFSC  03.2
01D7:  INCF   79,F
01D8:  BCF    0A.3
01D9:  BCF    0A.4
01DA:  GOTO   35A (RETURN)
*
0219:  MOVF   0B,W
021A:  MOVWF  27
021B:  BCF    0B.7
021C:  BSF    03.5
021D:  BSF    03.6
021E:  BSF    0C.7
021F:  BSF    0C.0
0220:  NOP
0221:  NOP
0222:  BTFSC  03.0
0223:  GOTO   24B
0224:  BCF    03.5
0225:  MOVF   0C,W
0226:  ANDLW  7F
0227:  BCF    03.6
0228:  MOVWF  28
0229:  BSF    03.6
022A:  MOVF   0D,W
022B:  BCF    03.6
022C:  MOVWF  29
022D:  BSF    03.6
022E:  MOVF   0F,W
022F:  BCF    03.6
0230:  MOVWF  2A
0231:  MOVF   28,W
0232:  MOVWF  2F
0233:  CALL   1ED
0234:  MOVF   29,W
0235:  BSF    03.6
0236:  MOVWF  0D
0237:  BCF    03.6
0238:  MOVF   2A,W
0239:  BSF    03.6
023A:  MOVWF  0F
023B:  BSF    03.5
023C:  BSF    0C.7
023D:  BSF    0C.0
023E:  NOP
023F:  NOP
0240:  BCF    03.5
0241:  BCF    03.6
0242:  DECFSZ 26,F
0243:  GOTO   245
0244:  GOTO   248
0245:  BSF    03.5
0246:  BSF    03.6
0247:  GOTO   24B
0248:  GOTO   26A
0249:  BSF    03.5
024A:  BSF    03.6
024B:  BCF    03.5
024C:  RLF    0C,W
024D:  RLF    0E,W
024E:  ANDLW  7F
024F:  BCF    03.6
0250:  MOVWF  28
0251:  BSF    03.6
0252:  MOVF   0D,W
0253:  BCF    03.6
0254:  MOVWF  29
0255:  BSF    03.6
0256:  MOVF   0F,W
0257:  BCF    03.6
0258:  MOVWF  2A
0259:  MOVF   28,W
025A:  MOVWF  2F
025B:  CALL   1ED
025C:  MOVF   29,W
025D:  BSF    03.6
025E:  MOVWF  0D
025F:  BCF    03.6
0260:  MOVF   2A,W
0261:  BSF    03.6
0262:  MOVWF  0F
0263:  INCF   0D,F
0264:  BTFSC  03.2
0265:  INCF   0F,F
0266:  BCF    03.0
0267:  BCF    03.6
0268:  DECFSZ 26,F
0269:  GOTO   21C
026A:  BTFSC  27.7
026B:  BSF    0B.7
026C:  RETURN
026D:  CLRF   2E
026E:  MOVF   04,W
026F:  MOVWF  2D
0270:  BCF    2E.0
0271:  BTFSC  03.7
0272:  BSF    2E.0
0273:  BTFSS  27.7
0274:  GOTO   27D
0275:  BSF    2D.7
0276:  BTFSS  2D.4
0277:  INCF   2D,F
0278:  COMF   26,F
0279:  COMF   27,F
027A:  INCF   26,F
027B:  BTFSC  03.2
027C:  INCF   27,F
027D:  SWAPF  27,W
027E:  IORLW  F0
027F:  MOVWF  29
0280:  ADDWF  29,F
0281:  ADDLW  E2
0282:  MOVWF  2A
0283:  ADDLW  32
0284:  MOVWF  2C
0285:  MOVF   27,W
0286:  ANDLW  0F
0287:  ADDWF  2A,F
0288:  ADDWF  2A,F
0289:  ADDWF  2C,F
028A:  ADDLW  E9
028B:  MOVWF  2B
028C:  ADDWF  2B,F
028D:  ADDWF  2B,F
028E:  SWAPF  26,W
028F:  ANDLW  0F
0290:  ADDWF  2B,F
0291:  ADDWF  2C,F
0292:  RLF    2B,F
0293:  RLF    2C,F
0294:  COMF   2C,F
0295:  RLF    2C,F
0296:  MOVF   26,W
0297:  ANDLW  0F
0298:  ADDWF  2C,F
0299:  RLF    29,F
029A:  MOVLW  07
029B:  MOVWF  28
029C:  MOVLW  0A
029D:  ADDWF  2C,F
029E:  DECF   2B,F
029F:  BTFSS  03.0
02A0:  GOTO   29D
02A1:  ADDWF  2B,F
02A2:  DECF   2A,F
02A3:  BTFSS  03.0
02A4:  GOTO   2A1
02A5:  ADDWF  2A,F
02A6:  DECF   29,F
02A7:  BTFSS  03.0
02A8:  GOTO   2A5
02A9:  ADDWF  29,F
02AA:  DECF   28,F
02AB:  BTFSS  03.0
02AC:  GOTO   2A9
02AD:  MOVLW  28
02AE:  MOVWF  04
02AF:  BCF    03.7
02B0:  MOVLW  07
02B1:  ANDWF  2D,W
02B2:  BCF    2D.6
02B3:  DECF   04,F
02B4:  ANDWF  2D,W
02B5:  BTFSS  03.2
02B6:  GOTO   2BE
02B7:  BTFSC  2D.4
02B8:  INCF   04,F
02B9:  BTFSC  2D.4
02BA:  GOTO   2BE
02BB:  MOVLW  20
02BC:  MOVWF  77
02BD:  GOTO   2DB
02BE:  ADDWF  04,F
02BF:  MOVLW  2C
02C0:  SUBWF  04,W
02C1:  BTFSC  03.2
02C2:  BSF    2D.6
02C3:  MOVF   00,W
02C4:  MOVWF  77
02C5:  BTFSS  03.2
02C6:  GOTO   2CF
02C7:  BTFSC  2D.6
02C8:  GOTO   2CF
02C9:  BTFSC  2D.4
02CA:  GOTO   2E9
02CB:  BTFSC  2D.3
02CC:  GOTO   2CF
02CD:  MOVLW  20
02CE:  GOTO   2DA
02CF:  BTFSS  2D.7
02D0:  GOTO   2D7
02D1:  MOVLW  2D
02D2:  MOVWF  77
02D3:  DECF   04,F
02D4:  BCF    2D.6
02D5:  BCF    2D.7
02D6:  GOTO   2DB
02D7:  BSF    2D.3
02D8:  BCF    2D.4
02D9:  MOVLW  30
02DA:  ADDWF  77,F
02DB:  CLRF   27
02DC:  MOVF   04,W
02DD:  MOVWF  26
02DE:  BCF    27.0
02DF:  BTFSC  03.7
02E0:  BSF    27.0
02E1:  MOVF   77,W
02E2:  MOVWF  2F
02E3:  CALL   1ED
02E4:  MOVF   26,W
02E5:  MOVWF  04
02E6:  BCF    03.7
02E7:  BTFSC  27.0
02E8:  BSF    03.7
02E9:  INCF   04,F
02EA:  BTFSS  2D.6
02EB:  GOTO   2BF
02EC:  BCF    0A.3
02ED:  BCF    0A.4
02EE:  GOTO   373 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
001A:  MOVLW  30
001B:  MOVWF  04
001C:  BCF    03.7
001D:  MOVF   00,W
001E:  BTFSC  03.2
001F:  GOTO   02E
0020:  MOVLW  01
0021:  MOVWF  78
0022:  CLRF   77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 78,F
0026:  GOTO   022
0027:  MOVLW  4A
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  GOTO   02C
002C:  DECFSZ 00,F
002D:  GOTO   020
002E:  RETURN
....................  
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0093:  BSF    08.4
....................    output_float(LCD_DATA5); 
0094:  BSF    08.5
....................    output_float(LCD_DATA6); 
0095:  BSF    08.6
....................    output_float(LCD_DATA7); 
0096:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0097:  BCF    03.5
0098:  BSF    08.1
0099:  BSF    03.5
009A:  BCF    08.1
....................    delay_cycles(1); 
009B:  NOP
....................    lcd_output_enable(1); 
009C:  BCF    03.5
009D:  BSF    08.2
009E:  BSF    03.5
009F:  BCF    08.2
....................    delay_cycles(1); 
00A0:  NOP
....................    high = lcd_read_nibble(); 
00A1:  BCF    03.5
00A2:  CALL   05A
00A3:  MOVF   78,W
00A4:  MOVWF  37
....................        
....................    lcd_output_enable(0); 
00A5:  BCF    08.2
00A6:  BSF    03.5
00A7:  BCF    08.2
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_enable(1); 
00A9:  BCF    03.5
00AA:  BSF    08.2
00AB:  BSF    03.5
00AC:  BCF    08.2
....................    delay_us(1); 
00AD:  NOP
....................    low = lcd_read_nibble(); 
00AE:  BCF    03.5
00AF:  CALL   05A
00B0:  MOVF   78,W
00B1:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
00B2:  BCF    08.2
00B3:  BSF    03.5
00B4:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B5:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00B6:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00B7:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00B8:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B9:  BCF    03.5
00BA:  SWAPF  37,W
00BB:  MOVWF  77
00BC:  MOVLW  F0
00BD:  ANDWF  77,F
00BE:  MOVF   77,W
00BF:  IORWF  36,W
00C0:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
005A:  CLRF   38
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
005B:  BSF    03.5
005C:  BSF    08.4
005D:  MOVLW  00
005E:  BCF    03.5
005F:  BTFSC  08.4
0060:  MOVLW  01
0061:  IORWF  38,F
....................    n |= input(LCD_DATA5) << 1; 
0062:  BSF    03.5
0063:  BSF    08.5
0064:  MOVLW  00
0065:  BCF    03.5
0066:  BTFSC  08.5
0067:  MOVLW  01
0068:  MOVWF  77
0069:  BCF    03.0
006A:  RLF    77,F
006B:  MOVF   77,W
006C:  IORWF  38,F
....................    n |= input(LCD_DATA6) << 2; 
006D:  BSF    03.5
006E:  BSF    08.6
006F:  MOVLW  00
0070:  BCF    03.5
0071:  BTFSC  08.6
0072:  MOVLW  01
0073:  MOVWF  77
0074:  RLF    77,F
0075:  RLF    77,F
0076:  MOVLW  FC
0077:  ANDWF  77,F
0078:  MOVF   77,W
0079:  IORWF  38,F
....................    n |= input(LCD_DATA7) << 3; 
007A:  BSF    03.5
007B:  BSF    08.7
007C:  MOVLW  00
007D:  BCF    03.5
007E:  BTFSC  08.7
007F:  MOVLW  01
0080:  MOVWF  77
0081:  RLF    77,F
0082:  RLF    77,F
0083:  RLF    77,F
0084:  MOVLW  F8
0085:  ANDWF  77,F
0086:  MOVF   77,W
0087:  IORWF  38,F
....................     
....................    return(n); 
0088:  MOVF   38,W
0089:  MOVWF  78
....................   #else 
008A:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002F:  BTFSC  37.0
0030:  GOTO   033
0031:  BCF    08.4
0032:  GOTO   034
0033:  BSF    08.4
0034:  BSF    03.5
0035:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0036:  BCF    03.5
0037:  BTFSC  37.1
0038:  GOTO   03B
0039:  BCF    08.5
003A:  GOTO   03C
003B:  BSF    08.5
003C:  BSF    03.5
003D:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003E:  BCF    03.5
003F:  BTFSC  37.2
0040:  GOTO   043
0041:  BCF    08.6
0042:  GOTO   044
0043:  BSF    08.6
0044:  BSF    03.5
0045:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0046:  BCF    03.5
0047:  BTFSC  37.3
0048:  GOTO   04B
0049:  BCF    08.7
004A:  GOTO   04C
004B:  BSF    08.7
004C:  BSF    03.5
004D:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004E:  NOP
....................    lcd_output_enable(1); 
004F:  BCF    03.5
0050:  BSF    08.2
0051:  BSF    03.5
0052:  BCF    08.2
....................    delay_us(2); 
0053:  GOTO   054
....................    lcd_output_enable(0); 
0054:  BCF    03.5
0055:  BCF    08.2
0056:  BSF    03.5
0057:  BCF    08.2
0058:  BCF    03.5
0059:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008B:  BSF    03.5
008C:  BCF    08.2
....................    lcd_rs_tris(); 
008D:  BCF    08.0
....................    lcd_rw_tris(); 
008E:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008F:  BCF    03.5
0090:  BCF    08.0
0091:  BSF    03.5
0092:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C1:  MOVF   78,W
00C2:  MOVWF  36
00C3:  BTFSS  36.7
00C4:  GOTO   0C7
00C5:  BSF    03.5
00C6:  GOTO   093
....................    lcd_output_rs(address); 
00C7:  MOVF   34,F
00C8:  BTFSS  03.2
00C9:  GOTO   0CC
00CA:  BCF    08.0
00CB:  GOTO   0CD
00CC:  BSF    08.0
00CD:  BSF    03.5
00CE:  BCF    08.0
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_rw(0); 
00D0:  BCF    03.5
00D1:  BCF    08.1
00D2:  BSF    03.5
00D3:  BCF    08.1
....................    delay_cycles(1); 
00D4:  NOP
....................    lcd_output_enable(0); 
00D5:  BCF    03.5
00D6:  BCF    08.2
00D7:  BSF    03.5
00D8:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00D9:  BCF    03.5
00DA:  SWAPF  35,W
00DB:  MOVWF  36
00DC:  MOVLW  0F
00DD:  ANDWF  36,F
00DE:  MOVF   36,W
00DF:  MOVWF  37
00E0:  CALL   02F
....................    lcd_send_nibble(n & 0xf); 
00E1:  MOVF   35,W
00E2:  ANDLW  0F
00E3:  MOVWF  36
00E4:  MOVWF  37
00E5:  CALL   02F
00E6:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E7:  BSF    03.5
00E8:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00E9:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00EA:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00EB:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00EC:  BCF    08.2
....................    lcd_rs_tris(); 
00ED:  BCF    08.0
....................    lcd_rw_tris(); 
00EE:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00EF:  BCF    03.5
00F0:  BCF    08.0
00F1:  BSF    03.5
00F2:  BCF    08.0
....................    lcd_output_rw(0); 
00F3:  BCF    03.5
00F4:  BCF    08.1
00F5:  BSF    03.5
00F6:  BCF    08.1
....................    lcd_output_enable(0); 
00F7:  BCF    03.5
00F8:  BCF    08.2
00F9:  BSF    03.5
00FA:  BCF    08.2
....................      
....................    delay_ms(15); 
00FB:  MOVLW  0F
00FC:  BCF    03.5
00FD:  MOVWF  30
00FE:  CALL   01A
....................    for(i=1;i<=3;++i) 
00FF:  MOVLW  01
0100:  MOVWF  26
0101:  MOVF   26,W
0102:  SUBLW  03
0103:  BTFSS  03.0
0104:  GOTO   10D
....................    { 
....................        lcd_send_nibble(3); 
0105:  MOVLW  03
0106:  MOVWF  37
0107:  CALL   02F
....................        delay_ms(5); 
0108:  MOVLW  05
0109:  MOVWF  30
010A:  CALL   01A
010B:  INCF   26,F
010C:  GOTO   101
....................    } 
....................     
....................    lcd_send_nibble(2); 
010D:  MOVLW  02
010E:  MOVWF  37
010F:  CALL   02F
....................    delay_ms(5); 
0110:  MOVLW  05
0111:  MOVWF  30
0112:  CALL   01A
....................    for(i=0;i<=3;++i) 
0113:  CLRF   26
0114:  MOVF   26,W
0115:  SUBLW  03
0116:  BTFSS  03.0
0117:  GOTO   121
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0118:  MOVF   26,W
0119:  CALL   004
011A:  MOVWF  27
011B:  CLRF   34
011C:  MOVF   27,W
011D:  MOVWF  35
011E:  CALL   08B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
011F:  INCF   26,F
0120:  GOTO   114
0121:  BCF    0A.3
0122:  BCF    0A.4
0123:  GOTO   30E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01DB:  DECFSZ 31,W
01DC:  GOTO   1DE
01DD:  GOTO   1E1
....................       address=LCD_LINE_TWO; 
01DE:  MOVLW  40
01DF:  MOVWF  32
01E0:  GOTO   1E2
....................    else 
....................       address=0; 
01E1:  CLRF   32
....................       
....................    address+=x-1; 
01E2:  MOVLW  01
01E3:  SUBWF  30,W
01E4:  ADDWF  32,F
....................    lcd_send_byte(0,0x80|address); 
01E5:  MOVF   32,W
01E6:  IORLW  80
01E7:  MOVWF  33
01E8:  CLRF   34
01E9:  MOVF   33,W
01EA:  MOVWF  35
01EB:  CALL   08B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01EC:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01ED:  MOVF   2F,W
01EE:  XORLW  07
01EF:  BTFSC  03.2
01F0:  GOTO   1FB
01F1:  XORLW  0B
01F2:  BTFSC  03.2
01F3:  GOTO   200
01F4:  XORLW  06
01F5:  BTFSC  03.2
01F6:  GOTO   208
01F7:  XORLW  02
01F8:  BTFSC  03.2
01F9:  GOTO   20E
01FA:  GOTO   213
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01FB:  MOVLW  01
01FC:  MOVWF  30
01FD:  MOVWF  31
01FE:  CALL   1DB
01FF:  GOTO   218
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0200:  CLRF   34
0201:  MOVLW  01
0202:  MOVWF  35
0203:  CALL   08B
....................                      delay_ms(2); 
0204:  MOVLW  02
0205:  MOVWF  30
0206:  CALL   01A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0207:  GOTO   218
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0208:  MOVLW  01
0209:  MOVWF  30
020A:  MOVLW  02
020B:  MOVWF  31
020C:  CALL   1DB
020D:  GOTO   218
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
020E:  CLRF   34
020F:  MOVLW  10
0210:  MOVWF  35
0211:  CALL   08B
0212:  GOTO   218
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0213:  MOVLW  01
0214:  MOVWF  34
0215:  MOVF   2F,W
0216:  MOVWF  35
0217:  CALL   08B
....................      #endif 
....................    } 
0218:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main(){ 
*
02EF:  MOVF   03,W
02F0:  ANDLW  1F
02F1:  MOVWF  03
02F2:  BSF    03.5
02F3:  BSF    1F.0
02F4:  BSF    1F.1
02F5:  BSF    1F.2
02F6:  BCF    1F.3
02F7:  MOVLW  07
02F8:  MOVWF  1C
02F9:  BCF    03.7
02FA:  BCF    03.5
02FB:  CLRF   21
02FC:  CLRF   23
02FD:  CLRF   22
02FE:  CLRF   25
02FF:  CLRF   24
.................... int EC=0; 
.................... long int light=0,temperature=0; 
....................  
....................    setup_adc_ports(AN0_AN1_AN3); 
0300:  BSF    03.5
0301:  BCF    1F.0
0302:  BCF    1F.1
0303:  BSF    1F.2
0304:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0305:  BCF    1F.6
0306:  BCF    03.5
0307:  BSF    1F.6
0308:  BSF    1F.7
0309:  BSF    03.5
030A:  BSF    1F.7
030B:  BCF    03.5
030C:  BSF    1F.0
....................    lcd_init(); 
030D:  GOTO   0E7
....................  
....................    while(TRUE) 
....................    { 
....................       SET_ADC_CHANNEL(0); 
030E:  MOVLW  00
030F:  MOVWF  78
0310:  MOVF   1F,W
0311:  ANDLW  C7
0312:  IORWF  78,W
0313:  MOVWF  1F
....................       WHILE(!EC) 
0314:  MOVF   21,F
0315:  BTFSS  03.2
0316:  GOTO   31B
....................       { EC =adc_done();} 
0317:  CLRF   21
0318:  BTFSS  1F.2
0319:  INCF   21,F
031A:  GOTO   314
....................       light = read_adc(); //light 
031B:  BSF    1F.2
031C:  BTFSC  1F.2
031D:  GOTO   31C
031E:  BSF    03.5
031F:  MOVF   1E,W
0320:  BCF    03.5
0321:  MOVWF  22
0322:  MOVF   1E,W
0323:  MOVWF  23
....................        
....................       EC = 0; 
0324:  CLRF   21
....................       SET_ADC_CHANNEL(1); 
0325:  MOVLW  08
0326:  MOVWF  78
0327:  MOVF   1F,W
0328:  ANDLW  C7
0329:  IORWF  78,W
032A:  MOVWF  1F
....................       WHILE(!EC) 
032B:  MOVF   21,F
032C:  BTFSS  03.2
032D:  GOTO   332
....................       {EC =adc_done();} 
032E:  CLRF   21
032F:  BTFSS  1F.2
0330:  INCF   21,F
0331:  GOTO   32B
....................       temperature = read_adc(); //temperature 
0332:  BSF    1F.2
0333:  BTFSC  1F.2
0334:  GOTO   333
0335:  BSF    03.5
0336:  MOVF   1E,W
0337:  BCF    03.5
0338:  MOVWF  24
0339:  MOVF   1E,W
033A:  MOVWF  25
....................        
....................       temperature=temperature * 0.488; 
033B:  MOVF   25,W
033C:  MOVWF  27
033D:  MOVF   24,W
033E:  MOVWF  26
033F:  GOTO   124
0340:  MOVF   7A,W
0341:  MOVWF  29
0342:  MOVF   79,W
0343:  MOVWF  28
0344:  MOVF   78,W
0345:  MOVWF  27
0346:  MOVF   77,W
0347:  MOVWF  26
0348:  MOVLW  23
0349:  MOVWF  2D
034A:  MOVLW  DB
034B:  MOVWF  2C
034C:  MOVLW  79
034D:  MOVWF  2B
034E:  MOVLW  7D
034F:  MOVWF  2A
0350:  GOTO   143
0351:  MOVF   7A,W
0352:  MOVWF  29
0353:  MOVF   79,W
0354:  MOVWF  28
0355:  MOVF   78,W
0356:  MOVWF  27
0357:  MOVF   77,W
0358:  MOVWF  26
0359:  GOTO   1BA
035A:  MOVF   79,W
035B:  MOVWF  25
035C:  MOVF   78,W
035D:  MOVWF  24
....................       lcd_gotoxy(1,1); 
035E:  MOVLW  01
035F:  MOVWF  30
0360:  MOVWF  31
0361:  CALL   1DB
....................       printf(lcd_putc,"\tTemperature\n\t%ld - Celsius",temperature); 
0362:  MOVLW  0C
0363:  BSF    03.6
0364:  MOVWF  0D
0365:  MOVLW  00
0366:  MOVWF  0F
0367:  BCF    03.0
0368:  MOVLW  0E
0369:  BCF    03.6
036A:  MOVWF  26
036B:  CALL   219
036C:  MOVLW  10
036D:  MOVWF  04
036E:  MOVF   25,W
036F:  MOVWF  27
0370:  MOVF   24,W
0371:  MOVWF  26
0372:  GOTO   26D
0373:  MOVLW  14
0374:  BSF    03.6
0375:  MOVWF  0D
0376:  MOVLW  00
0377:  MOVWF  0F
0378:  BSF    03.0
0379:  MOVLW  0A
037A:  BCF    03.6
037B:  MOVWF  26
037C:  CALL   219
....................       delay_ms(200); 
037D:  MOVLW  C8
037E:  MOVWF  30
037F:  CALL   01A
....................        
....................       if(temperature > 30) 
0380:  MOVF   25,F
0381:  BTFSS  03.2
0382:  GOTO   387
0383:  MOVF   24,W
0384:  SUBLW  1E
0385:  BTFSC  03.0
0386:  GOTO   3A0
....................       { 
....................                if(light < 2) 
0387:  MOVF   23,F
0388:  BTFSS  03.2
0389:  GOTO   397
038A:  MOVF   22,W
038B:  SUBLW  01
038C:  BTFSS  03.0
038D:  GOTO   397
....................                { 
....................                    output_high(pin_b0); 
038E:  BSF    03.5
038F:  BCF    06.0
0390:  BCF    03.5
0391:  BSF    06.0
....................                    output_high(pin_b1);} 
0392:  BSF    03.5
0393:  BCF    06.1
0394:  BCF    03.5
0395:  BSF    06.1
0396:  GOTO   39F
....................                else 
....................                     {output_low(pin_b0); 
0397:  BSF    03.5
0398:  BCF    06.0
0399:  BCF    03.5
039A:  BCF    06.0
....................                     output_low(pin_b1);} 
039B:  BSF    03.5
039C:  BCF    06.1
039D:  BCF    03.5
039E:  BCF    06.1
....................                 } 
039F:  GOTO   3B8
....................        
....................       else  
....................       { 
....................           if(light < 2) 
03A0:  MOVF   23,F
03A1:  BTFSS  03.2
03A2:  GOTO   3B0
03A3:  MOVF   22,W
03A4:  SUBLW  01
03A5:  BTFSS  03.0
03A6:  GOTO   3B0
....................                {    output_high(pin_b1); 
03A7:  BSF    03.5
03A8:  BCF    06.1
03A9:  BCF    03.5
03AA:  BSF    06.1
....................                     output_low(pin_b0);} 
03AB:  BSF    03.5
03AC:  BCF    06.0
03AD:  BCF    03.5
03AE:  BCF    06.0
03AF:  GOTO   3B8
....................                else 
....................                     {output_low(pin_b1); 
03B0:  BSF    03.5
03B1:  BCF    06.1
03B2:  BCF    03.5
03B3:  BCF    06.1
....................                     output_low(pin_b0);} 
03B4:  BSF    03.5
03B5:  BCF    06.0
03B6:  BCF    03.5
03B7:  BCF    06.0
....................       } 
....................        delay_ms(200); 
03B8:  MOVLW  C8
03B9:  MOVWF  30
03BA:  CALL   01A
03BB:  GOTO   30E
....................    } 
....................    } 
....................  
03BC:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
