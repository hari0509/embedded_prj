CCS PCM C Compiler, Version 5.008, 5967               28-Jun-22 08:50

               Filename:   C:\Users\jarvis\Desktop\mpmc\jai\jai.lst

               ROM used:   1257 words (15%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           39 (11%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   430
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,29
000D:  DATA E5,30
000E:  DATA E4,34
000F:  DATA EE,33
0010:  DATA A0,20
0011:  DATA EE,30
0012:  DATA EC,37
0013:  DATA 67,17
0014:  DATA 2E,17
0015:  DATA 00,00
0016:  DATA 0C,32
0017:  DATA E9,33
0018:  DATA 5F,3B
0019:  DATA 61,36
001A:  DATA BD,12
001B:  DATA 66,00
*
0126:  CLRF   78
0127:  CLRF   79
0128:  CLRF   77
0129:  CLRF   7A
012A:  MOVF   2B,W
012B:  BTFSS  03.2
012C:  GOTO   130
012D:  MOVF   2A,W
012E:  BTFSC  03.2
012F:  GOTO   14A
0130:  MOVLW  10
0131:  MOVWF  2C
0132:  BCF    03.0
0133:  RLF    28,F
0134:  RLF    29,F
0135:  RLF    77,F
0136:  RLF    7A,F
0137:  MOVF   2B,W
0138:  SUBWF  7A,W
0139:  BTFSS  03.2
013A:  GOTO   13D
013B:  MOVF   2A,W
013C:  SUBWF  77,W
013D:  BTFSS  03.0
013E:  GOTO   146
013F:  MOVF   2A,W
0140:  SUBWF  77,F
0141:  BTFSS  03.0
0142:  DECF   7A,F
0143:  MOVF   2B,W
0144:  SUBWF  7A,F
0145:  BSF    03.0
0146:  RLF    78,F
0147:  RLF    79,F
0148:  DECFSZ 2C,F
0149:  GOTO   132
014A:  BCF    0A.3
014B:  BCF    0A.4
014C:  GOTO   471 (RETURN)
014D:  MOVLW  8E
014E:  MOVWF  77
014F:  MOVF   29,W
0150:  MOVWF  78
0151:  MOVF   28,W
0152:  MOVWF  79
0153:  CLRF   7A
0154:  MOVF   78,F
0155:  BTFSS  03.2
0156:  GOTO   161
0157:  MOVF   79,W
0158:  MOVWF  78
0159:  CLRF   79
015A:  MOVLW  08
015B:  SUBWF  77,F
015C:  MOVF   78,F
015D:  BTFSS  03.2
015E:  GOTO   161
015F:  CLRF   77
0160:  GOTO   169
0161:  BCF    03.0
0162:  BTFSC  78.7
0163:  GOTO   168
0164:  RLF    79,F
0165:  RLF    78,F
0166:  DECF   77,F
0167:  GOTO   161
0168:  BCF    78.7
0169:  BCF    0A.3
016A:  BCF    0A.4
016B:  GOTO   478 (RETURN)
*
01AA:  MOVF   0B,W
01AB:  MOVWF  28
01AC:  BCF    0B.7
01AD:  BSF    03.5
01AE:  BSF    03.6
01AF:  BSF    0C.7
01B0:  BSF    0C.0
01B1:  NOP
01B2:  NOP
01B3:  BCF    03.5
01B4:  MOVF   0C,W
01B5:  ANDLW  7F
01B6:  BTFSC  03.2
01B7:  GOTO   1F1
01B8:  BCF    03.6
01B9:  MOVWF  29
01BA:  BSF    03.6
01BB:  MOVF   0D,W
01BC:  BCF    03.6
01BD:  MOVWF  2A
01BE:  BSF    03.6
01BF:  MOVF   0F,W
01C0:  BCF    03.6
01C1:  MOVWF  2B
01C2:  MOVF   29,W
01C3:  MOVWF  35
01C4:  CALL   17E
01C5:  MOVF   2A,W
01C6:  BSF    03.6
01C7:  MOVWF  0D
01C8:  BCF    03.6
01C9:  MOVF   2B,W
01CA:  BSF    03.6
01CB:  MOVWF  0F
01CC:  BSF    03.5
01CD:  BSF    0C.7
01CE:  BSF    0C.0
01CF:  NOP
01D0:  NOP
01D1:  BCF    03.5
01D2:  RLF    0C,W
01D3:  RLF    0E,W
01D4:  ANDLW  7F
01D5:  BTFSC  03.2
01D6:  GOTO   1F1
01D7:  BCF    03.6
01D8:  MOVWF  29
01D9:  BSF    03.6
01DA:  MOVF   0D,W
01DB:  BCF    03.6
01DC:  MOVWF  2A
01DD:  BSF    03.6
01DE:  MOVF   0F,W
01DF:  BCF    03.6
01E0:  MOVWF  2B
01E1:  MOVF   29,W
01E2:  MOVWF  35
01E3:  CALL   17E
01E4:  MOVF   2A,W
01E5:  BSF    03.6
01E6:  MOVWF  0D
01E7:  BCF    03.6
01E8:  MOVF   2B,W
01E9:  BSF    03.6
01EA:  MOVWF  0F
01EB:  INCF   0D,F
01EC:  BTFSC  03.2
01ED:  INCF   0F,F
01EE:  BCF    03.6
01EF:  GOTO   1AD
01F0:  BSF    03.6
01F1:  BCF    03.6
01F2:  BTFSC  28.7
01F3:  BSF    0B.7
01F4:  BCF    0A.3
01F5:  BCF    0A.4
01F6:  GOTO   487 (RETURN)
01F7:  MOVF   0B,W
01F8:  MOVWF  29
01F9:  BCF    0B.7
01FA:  BSF    03.5
01FB:  BSF    03.6
01FC:  BSF    0C.7
01FD:  BSF    0C.0
01FE:  NOP
01FF:  NOP
0200:  BTFSC  03.0
0201:  GOTO   229
0202:  BCF    03.5
0203:  MOVF   0C,W
0204:  ANDLW  7F
0205:  BCF    03.6
0206:  MOVWF  2A
0207:  BSF    03.6
0208:  MOVF   0D,W
0209:  BCF    03.6
020A:  MOVWF  2B
020B:  BSF    03.6
020C:  MOVF   0F,W
020D:  BCF    03.6
020E:  MOVWF  2C
020F:  MOVF   2A,W
0210:  MOVWF  35
0211:  CALL   17E
0212:  MOVF   2B,W
0213:  BSF    03.6
0214:  MOVWF  0D
0215:  BCF    03.6
0216:  MOVF   2C,W
0217:  BSF    03.6
0218:  MOVWF  0F
0219:  BSF    03.5
021A:  BSF    0C.7
021B:  BSF    0C.0
021C:  NOP
021D:  NOP
021E:  BCF    03.5
021F:  BCF    03.6
0220:  DECFSZ 28,F
0221:  GOTO   223
0222:  GOTO   226
0223:  BSF    03.5
0224:  BSF    03.6
0225:  GOTO   229
0226:  GOTO   248
0227:  BSF    03.5
0228:  BSF    03.6
0229:  BCF    03.5
022A:  RLF    0C,W
022B:  RLF    0E,W
022C:  ANDLW  7F
022D:  BCF    03.6
022E:  MOVWF  2A
022F:  BSF    03.6
0230:  MOVF   0D,W
0231:  BCF    03.6
0232:  MOVWF  2B
0233:  BSF    03.6
0234:  MOVF   0F,W
0235:  BCF    03.6
0236:  MOVWF  2C
0237:  MOVF   2A,W
0238:  MOVWF  35
0239:  CALL   17E
023A:  MOVF   2B,W
023B:  BSF    03.6
023C:  MOVWF  0D
023D:  BCF    03.6
023E:  MOVF   2C,W
023F:  BSF    03.6
0240:  MOVWF  0F
0241:  INCF   0D,F
0242:  BTFSC  03.2
0243:  INCF   0F,F
0244:  BCF    03.0
0245:  BCF    03.6
0246:  DECFSZ 28,F
0247:  GOTO   1FA
0248:  BTFSC  29.7
0249:  BSF    0B.7
024A:  BCF    0A.3
024B:  BCF    0A.4
024C:  GOTO   49C (RETURN)
024D:  BTFSC  03.1
024E:  GOTO   252
024F:  MOVLW  3D
0250:  MOVWF  04
0251:  BCF    03.7
0252:  CLRF   77
0253:  CLRF   78
0254:  CLRF   79
0255:  CLRF   7A
0256:  CLRF   3D
0257:  CLRF   3E
0258:  CLRF   3F
0259:  CLRF   40
025A:  MOVF   3C,W
025B:  IORWF  3B,W
025C:  IORWF  3A,W
025D:  IORWF  39,W
025E:  BTFSC  03.2
025F:  GOTO   290
0260:  MOVLW  20
0261:  MOVWF  41
0262:  BCF    03.0
0263:  RLF    35,F
0264:  RLF    36,F
0265:  RLF    37,F
0266:  RLF    38,F
0267:  RLF    3D,F
0268:  RLF    3E,F
0269:  RLF    3F,F
026A:  RLF    40,F
026B:  MOVF   3C,W
026C:  SUBWF  40,W
026D:  BTFSS  03.2
026E:  GOTO   279
026F:  MOVF   3B,W
0270:  SUBWF  3F,W
0271:  BTFSS  03.2
0272:  GOTO   279
0273:  MOVF   3A,W
0274:  SUBWF  3E,W
0275:  BTFSS  03.2
0276:  GOTO   279
0277:  MOVF   39,W
0278:  SUBWF  3D,W
0279:  BTFSS  03.0
027A:  GOTO   28A
027B:  MOVF   39,W
027C:  SUBWF  3D,F
027D:  MOVF   3A,W
027E:  BTFSS  03.0
027F:  INCFSZ 3A,W
0280:  SUBWF  3E,F
0281:  MOVF   3B,W
0282:  BTFSS  03.0
0283:  INCFSZ 3B,W
0284:  SUBWF  3F,F
0285:  MOVF   3C,W
0286:  BTFSS  03.0
0287:  INCFSZ 3C,W
0288:  SUBWF  40,F
0289:  BSF    03.0
028A:  RLF    77,F
028B:  RLF    78,F
028C:  RLF    79,F
028D:  RLF    7A,F
028E:  DECFSZ 41,F
028F:  GOTO   262
0290:  MOVF   3D,W
0291:  MOVWF  00
0292:  INCF   04,F
0293:  MOVF   3E,W
0294:  MOVWF  00
0295:  INCF   04,F
0296:  MOVF   3F,W
0297:  MOVWF  00
0298:  INCF   04,F
0299:  MOVF   40,W
029A:  MOVWF  00
029B:  RETURN
029C:  MOVF   04,W
029D:  MOVWF  2D
029E:  MOVF   2C,W
029F:  MOVWF  2F
02A0:  BTFSC  03.2
02A1:  GOTO   32E
02A2:  MOVF   2B,W
02A3:  MOVWF  38
02A4:  MOVF   2A,W
02A5:  MOVWF  37
02A6:  MOVF   29,W
02A7:  MOVWF  36
02A8:  MOVF   28,W
02A9:  MOVWF  35
02AA:  CLRF   3C
02AB:  CLRF   3B
02AC:  MOVLW  20
02AD:  MOVWF  3A
02AE:  MOVLW  82
02AF:  MOVWF  39
02B0:  MOVF   35,W
02B1:  BTFSC  03.2
02B2:  GOTO   320
02B3:  MOVWF  3D
02B4:  MOVF   39,W
02B5:  BTFSC  03.2
02B6:  GOTO   320
02B7:  ADDWF  3D,F
02B8:  BTFSC  03.0
02B9:  GOTO   2C1
02BA:  MOVLW  7F
02BB:  SUBWF  3D,F
02BC:  BTFSS  03.0
02BD:  GOTO   320
02BE:  BTFSC  03.2
02BF:  GOTO   320
02C0:  GOTO   2C5
02C1:  MOVLW  81
02C2:  ADDWF  3D,F
02C3:  BTFSC  03.0
02C4:  GOTO   320
02C5:  MOVF   3D,W
02C6:  MOVWF  77
02C7:  CLRF   78
02C8:  CLRF   79
02C9:  CLRF   7A
02CA:  MOVF   36,W
02CB:  MOVWF  41
02CC:  BSF    41.7
02CD:  MOVF   37,W
02CE:  MOVWF  40
02CF:  MOVF   38,W
02D0:  MOVWF  3F
02D1:  MOVLW  18
02D2:  MOVWF  3D
02D3:  CLRF   3E
02D4:  BTFSS  3F.0
02D5:  GOTO   2EE
02D6:  MOVF   3C,W
02D7:  ADDWF  7A,F
02D8:  BTFSS  03.0
02D9:  GOTO   2E0
02DA:  INCF   79,F
02DB:  BTFSS  03.2
02DC:  GOTO   2E0
02DD:  INCF   78,F
02DE:  BTFSC  03.2
02DF:  BSF    3E.7
02E0:  MOVF   3B,W
02E1:  ADDWF  79,F
02E2:  BTFSS  03.0
02E3:  GOTO   2E7
02E4:  INCF   78,F
02E5:  BTFSC  03.2
02E6:  BSF    3E.7
02E7:  MOVF   3A,W
02E8:  MOVWF  37
02E9:  BSF    37.7
02EA:  MOVF   37,W
02EB:  ADDWF  78,F
02EC:  BTFSC  03.0
02ED:  BSF    3E.7
02EE:  RLF    3E,F
02EF:  RRF    78,F
02F0:  RRF    79,F
02F1:  RRF    7A,F
02F2:  RRF    41,F
02F3:  RRF    40,F
02F4:  RRF    3F,F
02F5:  BCF    03.0
02F6:  DECFSZ 3D,F
02F7:  GOTO   2D3
02F8:  MOVLW  01
02F9:  ADDWF  77,F
02FA:  BTFSC  03.0
02FB:  GOTO   320
02FC:  BTFSC  78.7
02FD:  GOTO   305
02FE:  RLF    41,F
02FF:  RLF    7A,F
0300:  RLF    79,F
0301:  RLF    78,F
0302:  DECF   77,F
0303:  BTFSC  03.2
0304:  GOTO   320
0305:  BTFSS  41.7
0306:  GOTO   316
0307:  INCF   7A,F
0308:  BTFSS  03.2
0309:  GOTO   316
030A:  INCF   79,F
030B:  BTFSS  03.2
030C:  GOTO   316
030D:  INCF   78,F
030E:  BTFSS  03.2
030F:  GOTO   316
0310:  RRF    78,F
0311:  RRF    79,F
0312:  RRF    7A,F
0313:  INCF   77,F
0314:  BTFSC  03.2
0315:  GOTO   320
0316:  MOVF   36,W
0317:  MOVWF  3E
0318:  MOVF   3A,W
0319:  XORWF  3E,F
031A:  BTFSS  3E.7
031B:  GOTO   31E
031C:  BSF    78.7
031D:  GOTO   324
031E:  BCF    78.7
031F:  GOTO   324
0320:  CLRF   77
0321:  CLRF   78
0322:  CLRF   79
0323:  CLRF   7A
0324:  MOVF   7A,W
0325:  MOVWF  2B
0326:  MOVF   79,W
0327:  MOVWF  2A
0328:  MOVF   78,W
0329:  MOVWF  29
032A:  MOVF   77,W
032B:  MOVWF  28
032C:  DECFSZ 2F,F
032D:  GOTO   2A2
032E:  MOVF   2B,W
032F:  MOVWF  38
0330:  MOVF   2A,W
0331:  MOVWF  37
0332:  MOVF   29,W
0333:  MOVWF  36
0334:  MOVF   28,W
0335:  MOVWF  35
0336:  MOVF   35,W
0337:  SUBLW  B6
0338:  MOVWF  35
0339:  CLRF   7A
033A:  MOVF   36,W
033B:  MOVWF  39
033C:  BSF    36.7
033D:  BCF    03.0
033E:  RRF    36,F
033F:  RRF    37,F
0340:  RRF    38,F
0341:  RRF    7A,F
0342:  RRF    79,F
0343:  RRF    78,F
0344:  RRF    77,F
0345:  DECFSZ 35,F
0346:  GOTO   33D
0347:  BTFSS  39.7
0348:  GOTO   354
0349:  COMF   77,F
034A:  COMF   78,F
034B:  COMF   79,F
034C:  COMF   7A,F
034D:  INCF   77,F
034E:  BTFSC  03.2
034F:  INCF   78,F
0350:  BTFSC  03.2
0351:  INCF   79,F
0352:  BTFSC  03.2
0353:  INCF   7A,F
0354:  MOVF   7A,W
0355:  MOVWF  2B
0356:  MOVF   79,W
0357:  MOVWF  2A
0358:  MOVF   78,W
0359:  MOVWF  29
035A:  MOVF   77,W
035B:  MOVWF  28
035C:  BTFSS  2B.7
035D:  GOTO   36B
035E:  DECF   2D,F
035F:  BSF    2D.5
0360:  COMF   28,F
0361:  COMF   29,F
0362:  COMF   2A,F
0363:  COMF   2B,F
0364:  INCF   28,F
0365:  BTFSC  03.2
0366:  INCF   29,F
0367:  BTFSC  03.2
0368:  INCF   2A,F
0369:  BTFSC  03.2
036A:  INCF   2B,F
036B:  MOVLW  3B
036C:  MOVWF  34
036D:  MOVLW  9A
036E:  MOVWF  33
036F:  MOVLW  CA
0370:  MOVWF  32
0371:  CLRF   31
0372:  MOVLW  0A
0373:  MOVWF  2F
0374:  MOVF   2C,W
0375:  BTFSC  03.2
0376:  INCF   2D,F
0377:  BSF    03.1
0378:  MOVLW  28
0379:  MOVWF  04
037A:  BCF    03.7
037B:  MOVF   2B,W
037C:  MOVWF  38
037D:  MOVF   2A,W
037E:  MOVWF  37
037F:  MOVF   29,W
0380:  MOVWF  36
0381:  MOVF   28,W
0382:  MOVWF  35
0383:  MOVF   34,W
0384:  MOVWF  3C
0385:  MOVF   33,W
0386:  MOVWF  3B
0387:  MOVF   32,W
0388:  MOVWF  3A
0389:  MOVF   31,W
038A:  MOVWF  39
038B:  CALL   24D
038C:  MOVF   78,W
038D:  MOVF   77,F
038E:  BTFSS  03.2
038F:  GOTO   3A3
0390:  INCF   2C,W
0391:  SUBWF  2F,W
0392:  BTFSC  03.2
0393:  GOTO   3A3
0394:  MOVF   2D,W
0395:  BTFSC  03.2
0396:  GOTO   3A5
0397:  ANDLW  0F
0398:  SUBWF  2F,W
0399:  BTFSC  03.2
039A:  GOTO   39D
039B:  BTFSC  03.0
039C:  GOTO   3D5
039D:  BTFSC  2D.7
039E:  GOTO   3D5
039F:  BTFSC  2D.6
03A0:  GOTO   3A5
03A1:  MOVLW  20
03A2:  GOTO   3D1
03A3:  MOVLW  20
03A4:  ANDWF  2D,F
03A5:  BTFSS  2D.5
03A6:  GOTO   3B3
03A7:  BCF    2D.5
03A8:  MOVF   2C,W
03A9:  BTFSS  03.2
03AA:  DECF   2D,F
03AB:  MOVF   77,W
03AC:  MOVWF  2D
03AD:  MOVLW  2D
03AE:  MOVWF  35
03AF:  CALL   17E
03B0:  MOVF   2D,W
03B1:  MOVWF  77
03B2:  CLRF   2D
03B3:  MOVF   2C,W
03B4:  SUBWF  2F,W
03B5:  BTFSS  03.2
03B6:  GOTO   3C1
03B7:  MOVF   77,W
03B8:  MOVWF  2D
03B9:  MOVLW  2E
03BA:  MOVWF  35
03BB:  CALL   17E
03BC:  MOVF   2D,W
03BD:  MOVWF  77
03BE:  MOVLW  20
03BF:  ANDWF  2D,F
03C0:  MOVLW  00
03C1:  MOVLW  30
03C2:  BTFSS  2D.5
03C3:  GOTO   3D1
03C4:  BCF    2D.5
03C5:  MOVF   2C,W
03C6:  BTFSS  03.2
03C7:  DECF   2D,F
03C8:  MOVF   77,W
03C9:  MOVWF  2D
03CA:  MOVLW  2D
03CB:  MOVWF  35
03CC:  CALL   17E
03CD:  MOVF   2D,W
03CE:  MOVWF  77
03CF:  CLRF   2D
03D0:  MOVLW  30
03D1:  ADDWF  77,F
03D2:  MOVF   77,W
03D3:  MOVWF  35
03D4:  CALL   17E
03D5:  BCF    03.1
03D6:  MOVF   34,W
03D7:  MOVWF  38
03D8:  MOVF   33,W
03D9:  MOVWF  37
03DA:  MOVF   32,W
03DB:  MOVWF  36
03DC:  MOVF   31,W
03DD:  MOVWF  35
03DE:  CLRF   3C
03DF:  CLRF   3B
03E0:  CLRF   3A
03E1:  MOVLW  0A
03E2:  MOVWF  39
03E3:  CALL   24D
03E4:  MOVF   7A,W
03E5:  MOVWF  34
03E6:  MOVF   79,W
03E7:  MOVWF  33
03E8:  MOVF   78,W
03E9:  MOVWF  32
03EA:  MOVF   77,W
03EB:  MOVWF  31
03EC:  DECFSZ 2F,F
03ED:  GOTO   377
03EE:  BCF    0A.3
03EF:  BCF    0A.4
03F0:  GOTO   4A9 (RETURN)
03F1:  MOVF   29,W
03F2:  MOVWF  30
03F3:  MOVF   2D,W
03F4:  XORWF  30,F
03F5:  BTFSS  30.7
03F6:  GOTO   3FC
03F7:  BCF    03.2
03F8:  BCF    03.0
03F9:  BTFSC  29.7
03FA:  BSF    03.0
03FB:  GOTO   42F
03FC:  MOVF   29,W
03FD:  MOVWF  30
03FE:  MOVF   2C,W
03FF:  MOVWF  31
0400:  MOVF   28,W
0401:  SUBWF  31,F
0402:  BTFSC  03.2
0403:  GOTO   40A
0404:  BTFSS  30.7
0405:  GOTO   42F
0406:  MOVF   03,W
0407:  XORLW  01
0408:  MOVWF  03
0409:  GOTO   42F
040A:  MOVF   2D,W
040B:  MOVWF  31
040C:  MOVF   29,W
040D:  SUBWF  31,F
040E:  BTFSC  03.2
040F:  GOTO   416
0410:  BTFSS  30.7
0411:  GOTO   42F
0412:  MOVF   03,W
0413:  XORLW  01
0414:  MOVWF  03
0415:  GOTO   42F
0416:  MOVF   2E,W
0417:  MOVWF  31
0418:  MOVF   2A,W
0419:  SUBWF  31,F
041A:  BTFSC  03.2
041B:  GOTO   422
041C:  BTFSS  30.7
041D:  GOTO   42F
041E:  MOVF   03,W
041F:  XORLW  01
0420:  MOVWF  03
0421:  GOTO   42F
0422:  MOVF   2F,W
0423:  MOVWF  31
0424:  MOVF   2B,W
0425:  SUBWF  31,F
0426:  BTFSC  03.2
0427:  GOTO   42E
0428:  BTFSS  30.7
0429:  GOTO   42F
042A:  MOVF   03,W
042B:  XORLW  01
042C:  MOVWF  03
042D:  GOTO   42F
042E:  BCF    03.0
042F:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
001C:  MOVLW  36
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   030
0022:  MOVLW  01
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  4A
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  DECFSZ 00,F
002F:  GOTO   022
0030:  RETURN
....................  
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0095:  BSF    08.4
....................    output_float(LCD_DATA5); 
0096:  BSF    08.5
....................    output_float(LCD_DATA6); 
0097:  BSF    08.6
....................    output_float(LCD_DATA7); 
0098:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0099:  BCF    03.5
009A:  BSF    08.1
009B:  BSF    03.5
009C:  BCF    08.1
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(1); 
009E:  BCF    03.5
009F:  BSF    08.2
00A0:  BSF    03.5
00A1:  BCF    08.2
....................    delay_cycles(1); 
00A2:  NOP
....................    high = lcd_read_nibble(); 
00A3:  BCF    03.5
00A4:  CALL   05C
00A5:  MOVF   78,W
00A6:  MOVWF  3D
....................        
....................    lcd_output_enable(0); 
00A7:  BCF    08.2
00A8:  BSF    03.5
00A9:  BCF    08.2
....................    delay_cycles(1); 
00AA:  NOP
....................    lcd_output_enable(1); 
00AB:  BCF    03.5
00AC:  BSF    08.2
00AD:  BSF    03.5
00AE:  BCF    08.2
....................    delay_us(1); 
00AF:  NOP
....................    low = lcd_read_nibble(); 
00B0:  BCF    03.5
00B1:  CALL   05C
00B2:  MOVF   78,W
00B3:  MOVWF  3C
....................        
....................    lcd_output_enable(0); 
00B4:  BCF    08.2
00B5:  BSF    03.5
00B6:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B7:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00B8:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00B9:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00BA:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BB:  BCF    03.5
00BC:  SWAPF  3D,W
00BD:  MOVWF  77
00BE:  MOVLW  F0
00BF:  ANDWF  77,F
00C0:  MOVF   77,W
00C1:  IORWF  3C,W
00C2:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
005C:  CLRF   3E
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
005D:  BSF    03.5
005E:  BSF    08.4
005F:  MOVLW  00
0060:  BCF    03.5
0061:  BTFSC  08.4
0062:  MOVLW  01
0063:  IORWF  3E,F
....................    n |= input(LCD_DATA5) << 1; 
0064:  BSF    03.5
0065:  BSF    08.5
0066:  MOVLW  00
0067:  BCF    03.5
0068:  BTFSC  08.5
0069:  MOVLW  01
006A:  MOVWF  77
006B:  BCF    03.0
006C:  RLF    77,F
006D:  MOVF   77,W
006E:  IORWF  3E,F
....................    n |= input(LCD_DATA6) << 2; 
006F:  BSF    03.5
0070:  BSF    08.6
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  08.6
0074:  MOVLW  01
0075:  MOVWF  77
0076:  RLF    77,F
0077:  RLF    77,F
0078:  MOVLW  FC
0079:  ANDWF  77,F
007A:  MOVF   77,W
007B:  IORWF  3E,F
....................    n |= input(LCD_DATA7) << 3; 
007C:  BSF    03.5
007D:  BSF    08.7
007E:  MOVLW  00
007F:  BCF    03.5
0080:  BTFSC  08.7
0081:  MOVLW  01
0082:  MOVWF  77
0083:  RLF    77,F
0084:  RLF    77,F
0085:  RLF    77,F
0086:  MOVLW  F8
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  3E,F
....................     
....................    return(n); 
008A:  MOVF   3E,W
008B:  MOVWF  78
....................   #else 
008C:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0031:  BTFSC  3D.0
0032:  GOTO   035
0033:  BCF    08.4
0034:  GOTO   036
0035:  BSF    08.4
0036:  BSF    03.5
0037:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0038:  BCF    03.5
0039:  BTFSC  3D.1
003A:  GOTO   03D
003B:  BCF    08.5
003C:  GOTO   03E
003D:  BSF    08.5
003E:  BSF    03.5
003F:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0040:  BCF    03.5
0041:  BTFSC  3D.2
0042:  GOTO   045
0043:  BCF    08.6
0044:  GOTO   046
0045:  BSF    08.6
0046:  BSF    03.5
0047:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0048:  BCF    03.5
0049:  BTFSC  3D.3
004A:  GOTO   04D
004B:  BCF    08.7
004C:  GOTO   04E
004D:  BSF    08.7
004E:  BSF    03.5
004F:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BCF    03.5
0052:  BSF    08.2
0053:  BSF    03.5
0054:  BCF    08.2
....................    delay_us(2); 
0055:  GOTO   056
....................    lcd_output_enable(0); 
0056:  BCF    03.5
0057:  BCF    08.2
0058:  BSF    03.5
0059:  BCF    08.2
005A:  BCF    03.5
005B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008D:  BSF    03.5
008E:  BCF    08.2
....................    lcd_rs_tris(); 
008F:  BCF    08.0
....................    lcd_rw_tris(); 
0090:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0091:  BCF    03.5
0092:  BCF    08.0
0093:  BSF    03.5
0094:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C3:  MOVF   78,W
00C4:  MOVWF  3C
00C5:  BTFSS  3C.7
00C6:  GOTO   0C9
00C7:  BSF    03.5
00C8:  GOTO   095
....................    lcd_output_rs(address); 
00C9:  MOVF   3A,F
00CA:  BTFSS  03.2
00CB:  GOTO   0CE
00CC:  BCF    08.0
00CD:  GOTO   0CF
00CE:  BSF    08.0
00CF:  BSF    03.5
00D0:  BCF    08.0
....................    delay_cycles(1); 
00D1:  NOP
....................    lcd_output_rw(0); 
00D2:  BCF    03.5
00D3:  BCF    08.1
00D4:  BSF    03.5
00D5:  BCF    08.1
....................    delay_cycles(1); 
00D6:  NOP
....................    lcd_output_enable(0); 
00D7:  BCF    03.5
00D8:  BCF    08.2
00D9:  BSF    03.5
00DA:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00DB:  BCF    03.5
00DC:  SWAPF  3B,W
00DD:  MOVWF  3C
00DE:  MOVLW  0F
00DF:  ANDWF  3C,F
00E0:  MOVF   3C,W
00E1:  MOVWF  3D
00E2:  CALL   031
....................    lcd_send_nibble(n & 0xf); 
00E3:  MOVF   3B,W
00E4:  ANDLW  0F
00E5:  MOVWF  3C
00E6:  MOVWF  3D
00E7:  CALL   031
00E8:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E9:  BSF    03.5
00EA:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00EB:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00EC:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00ED:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00EE:  BCF    08.2
....................    lcd_rs_tris(); 
00EF:  BCF    08.0
....................    lcd_rw_tris(); 
00F0:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00F1:  BCF    03.5
00F2:  BCF    08.0
00F3:  BSF    03.5
00F4:  BCF    08.0
....................    lcd_output_rw(0); 
00F5:  BCF    03.5
00F6:  BCF    08.1
00F7:  BSF    03.5
00F8:  BCF    08.1
....................    lcd_output_enable(0); 
00F9:  BCF    03.5
00FA:  BCF    08.2
00FB:  BSF    03.5
00FC:  BCF    08.2
....................      
....................    delay_ms(15); 
00FD:  MOVLW  0F
00FE:  BCF    03.5
00FF:  MOVWF  36
0100:  CALL   01C
....................    for(i=1;i<=3;++i) 
0101:  MOVLW  01
0102:  MOVWF  28
0103:  MOVF   28,W
0104:  SUBLW  03
0105:  BTFSS  03.0
0106:  GOTO   10F
....................    { 
....................        lcd_send_nibble(3); 
0107:  MOVLW  03
0108:  MOVWF  3D
0109:  CALL   031
....................        delay_ms(5); 
010A:  MOVLW  05
010B:  MOVWF  36
010C:  CALL   01C
010D:  INCF   28,F
010E:  GOTO   103
....................    } 
....................     
....................    lcd_send_nibble(2); 
010F:  MOVLW  02
0110:  MOVWF  3D
0111:  CALL   031
....................    delay_ms(5); 
0112:  MOVLW  05
0113:  MOVWF  36
0114:  CALL   01C
....................    for(i=0;i<=3;++i) 
0115:  CLRF   28
0116:  MOVF   28,W
0117:  SUBLW  03
0118:  BTFSS  03.0
0119:  GOTO   123
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011A:  MOVF   28,W
011B:  CALL   004
011C:  MOVWF  29
011D:  CLRF   3A
011E:  MOVF   29,W
011F:  MOVWF  3B
0120:  CALL   08D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0121:  INCF   28,F
0122:  GOTO   116
0123:  BCF    0A.3
0124:  BCF    0A.4
0125:  GOTO   453 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
016C:  DECFSZ 37,W
016D:  GOTO   16F
016E:  GOTO   172
....................       address=LCD_LINE_TWO; 
016F:  MOVLW  40
0170:  MOVWF  38
0171:  GOTO   173
....................    else 
....................       address=0; 
0172:  CLRF   38
....................       
....................    address+=x-1; 
0173:  MOVLW  01
0174:  SUBWF  36,W
0175:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
0176:  MOVF   38,W
0177:  IORLW  80
0178:  MOVWF  39
0179:  CLRF   3A
017A:  MOVF   39,W
017B:  MOVWF  3B
017C:  CALL   08D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
017D:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
017E:  MOVF   35,W
017F:  XORLW  07
0180:  BTFSC  03.2
0181:  GOTO   18C
0182:  XORLW  0B
0183:  BTFSC  03.2
0184:  GOTO   191
0185:  XORLW  06
0186:  BTFSC  03.2
0187:  GOTO   199
0188:  XORLW  02
0189:  BTFSC  03.2
018A:  GOTO   19F
018B:  GOTO   1A4
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
018C:  MOVLW  01
018D:  MOVWF  36
018E:  MOVWF  37
018F:  CALL   16C
0190:  GOTO   1A9
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0191:  CLRF   3A
0192:  MOVLW  01
0193:  MOVWF  3B
0194:  CALL   08D
....................                      delay_ms(2); 
0195:  MOVLW  02
0196:  MOVWF  36
0197:  CALL   01C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0198:  GOTO   1A9
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0199:  MOVLW  01
019A:  MOVWF  36
019B:  MOVLW  02
019C:  MOVWF  37
019D:  CALL   16C
019E:  GOTO   1A9
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
019F:  CLRF   3A
01A0:  MOVLW  10
01A1:  MOVWF  3B
01A2:  CALL   08D
01A3:  GOTO   1A9
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01A4:  MOVLW  01
01A5:  MOVWF  3A
01A6:  MOVF   35,W
01A7:  MOVWF  3B
01A8:  CALL   08D
....................      #endif 
....................    } 
01A9:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
0430:  MOVF   03,W
0431:  ANDLW  1F
0432:  MOVWF  03
0433:  MOVLW  FF
0434:  MOVWF  20
0435:  BSF    03.5
0436:  BSF    1F.0
0437:  BSF    1F.1
0438:  BSF    1F.2
0439:  BCF    1F.3
043A:  MOVLW  07
043B:  MOVWF  1C
043C:  BCF    03.7
043D:  BCF    03.5
043E:  CLRF   21
043F:  CLRF   23
0440:  CLRF   22
0441:  CLRF   27
0442:  CLRF   26
0443:  CLRF   25
0444:  CLRF   24
.................... { 
.................... int done=0; 
.................... long int end=0; 
.................... float v =0; 
....................    setup_adc_ports(AN0); 
0445:  BSF    03.5
0446:  BCF    1F.0
0447:  BSF    1F.1
0448:  BSF    1F.2
0449:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
044A:  BCF    1F.6
044B:  BCF    03.5
044C:  BSF    1F.6
044D:  BSF    1F.7
044E:  BSF    03.5
044F:  BSF    1F.7
0450:  BCF    03.5
0451:  BSF    1F.0
....................  
....................    lcd_init(); 
0452:  GOTO   0E9
....................    while(TRUE) 
....................     
....................    { 
....................     set_adc_channel(0); //channel set 
0453:  MOVLW  00
0454:  MOVWF  78
0455:  MOVF   1F,W
0456:  ANDLW  C7
0457:  IORWF  78,W
0458:  MOVWF  1F
....................     while(!done)  //start of conversion 
0459:  MOVF   21,F
045A:  BTFSS  03.2
045B:  GOTO   460
....................     { 
....................     done= adc_done(); 
045C:  CLRF   21
045D:  BTFSS  1F.2
045E:  INCF   21,F
045F:  GOTO   459
....................     } 
....................        end =  read_adc(); // end of coversion 
0460:  BSF    1F.2
0461:  BTFSC  1F.2
0462:  GOTO   461
0463:  BSF    03.5
0464:  MOVF   1E,W
0465:  BCF    03.5
0466:  MOVWF  22
0467:  MOVF   1E,W
0468:  MOVWF  23
....................        v=end/100; 
0469:  MOVF   23,W
046A:  MOVWF  29
046B:  MOVF   22,W
046C:  MOVWF  28
046D:  CLRF   2B
046E:  MOVLW  64
046F:  MOVWF  2A
0470:  GOTO   126
0471:  MOVF   79,W
0472:  MOVWF  7A
0473:  MOVF   78,W
0474:  MOVWF  28
0475:  MOVF   79,W
0476:  MOVWF  29
0477:  GOTO   14D
0478:  MOVF   7A,W
0479:  MOVWF  27
047A:  MOVF   79,W
047B:  MOVWF  26
047C:  MOVF   78,W
047D:  MOVWF  25
047E:  MOVF   77,W
047F:  MOVWF  24
....................        printf(lcd_putc, "\fReading Analog..."); 
0480:  MOVLW  0C
0481:  BSF    03.6
0482:  MOVWF  0D
0483:  MOVLW  00
0484:  MOVWF  0F
0485:  BCF    03.6
0486:  GOTO   1AA
....................        delay_ms(1000); 
0487:  MOVLW  04
0488:  MOVWF  28
0489:  MOVLW  FA
048A:  MOVWF  36
048B:  CALL   01C
048C:  DECFSZ 28,F
048D:  GOTO   489
....................        lcd_gotoxy(1,1); 
048E:  MOVLW  01
048F:  MOVWF  36
0490:  MOVWF  37
0491:  CALL   16C
....................        printf(lcd_putc, "\fdig_val=%f" ,v); // display 
0492:  MOVLW  16
0493:  BSF    03.6
0494:  MOVWF  0D
0495:  MOVLW  00
0496:  MOVWF  0F
0497:  BCF    03.0
0498:  MOVLW  09
0499:  BCF    03.6
049A:  MOVWF  28
049B:  GOTO   1F7
049C:  MOVLW  89
049D:  MOVWF  04
049E:  MOVF   27,W
049F:  MOVWF  2B
04A0:  MOVF   26,W
04A1:  MOVWF  2A
04A2:  MOVF   25,W
04A3:  MOVWF  29
04A4:  MOVF   24,W
04A5:  MOVWF  28
04A6:  MOVLW  02
04A7:  MOVWF  2C
04A8:  GOTO   29C
....................        delay_ms(500);  
04A9:  MOVLW  02
04AA:  MOVWF  28
04AB:  MOVLW  FA
04AC:  MOVWF  36
04AD:  CALL   01C
04AE:  DECFSZ 28,F
04AF:  GOTO   4AB
....................        if (v>=7){ 
04B0:  CLRF   2B
04B1:  CLRF   2A
04B2:  MOVLW  60
04B3:  MOVWF  29
04B4:  MOVLW  81
04B5:  MOVWF  28
04B6:  MOVF   27,W
04B7:  MOVWF  2F
04B8:  MOVF   26,W
04B9:  MOVWF  2E
04BA:  MOVF   25,W
04BB:  MOVWF  2D
04BC:  MOVF   24,W
04BD:  MOVWF  2C
04BE:  CALL   3F1
04BF:  BTFSC  03.0
04C0:  GOTO   4C3
04C1:  BTFSS  03.2
04C2:  GOTO   4CD
....................        output_high(pin_c0); 
04C3:  BCF    20.0
04C4:  MOVF   20,W
04C5:  BSF    03.5
04C6:  MOVWF  07
04C7:  BCF    03.5
04C8:  BSF    07.0
....................        delay_ms(100); 
04C9:  MOVLW  64
04CA:  MOVWF  36
04CB:  CALL   01C
....................         
....................        } 
04CC:  GOTO   4E7
....................        else if (v<3){ 
04CD:  MOVF   27,W
04CE:  MOVWF  2B
04CF:  MOVF   26,W
04D0:  MOVWF  2A
04D1:  MOVF   25,W
04D2:  MOVWF  29
04D3:  MOVF   24,W
04D4:  MOVWF  28
04D5:  CLRF   2F
04D6:  CLRF   2E
04D7:  MOVLW  40
04D8:  MOVWF  2D
04D9:  MOVLW  80
04DA:  MOVWF  2C
04DB:  CALL   3F1
04DC:  BTFSS  03.0
04DD:  GOTO   4E7
....................        output_low(pin_c0); 
04DE:  BCF    20.0
04DF:  MOVF   20,W
04E0:  BSF    03.5
04E1:  MOVWF  07
04E2:  BCF    03.5
04E3:  BCF    07.0
....................        delay_ms(100); 
04E4:  MOVLW  64
04E5:  MOVWF  36
04E6:  CALL   01C
....................        } 
04E7:  GOTO   453
....................         
....................    } 
....................  
.................... } 
04E8:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
